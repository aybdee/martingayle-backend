// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("LOCAL_DATABASE_URL")
}

enum PaymentPlan {
  FREE
  BASIC_NORMAL
  CUSTOMIZED_NORMAL
  BASIC_PRIME
  CUSTOMIZED_PRIME
}

enum TransactionType {
  BOT_SESION
  BOT_SESSION_PAYMENT
  REFERRAL_INCOMING
}

enum TransactionStatus {
  VERIFIED
  PENDING
  FAILED
}

enum AccountStatus {
  ACTIVE
  PENDING
  SUSPENDED
}

model User {
  id              Int               @id @default(autoincrement())
  email           String            @unique
  username        String            @unique
  firstname       String
  lastname        String
  password        String
  currentPlan     PaymentPlan       @default(FREE)
  refereeId       Int?
  referee         User?             @relation("Referrals", fields: [refereeId], references: [id])
  referrals       User[]            @relation("Referrals")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  sportyProfile   SportyProfile?
  botSession      BotSession?
  BetLogs         BetLogs[]
  TransactionLogs TransactionLogs[]
  StatsProfile    StatsProfile?
  accountStatus   AccountStatus     @default(ACTIVE)
  pendingPayment  Float             @default(0)
  pendingExpiry   DateTime?
}

model SportyProfile {
  id       Int    @id @default(autoincrement())
  phone    String
  password String
  userId   Int    @unique
  user     User   @relation(fields: [userId], references: [id])
}

model BotSession {
  phone         String @id
  userId        Int?   @unique
  initialAmount Float  @default(0)
  currentAmount Float  @default(0)
  user          User?  @relation(fields: [userId], references: [id])
}

model BetLogs {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  betAmount Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TransactionLogs {
  id        Int               @id @default(autoincrement())
  userId    Int
  user      User              @relation(fields: [userId], references: [id])
  amount    Float
  type      TransactionType
  status    TransactionStatus
  createdAt DateTime          @default(now())
}

model StatsProfile {
  id               Int   @id @default(autoincrement())
  userId           Int   @unique
  user             User  @relation(fields: [userId], references: [id])
  dailyProfit      Float @default(0)
  pendingSplit     Float @default(0)
  pendingWithdraw  Float @default(0)
  referralEarnings Float @default(0)
}
